Here are brief descriptions of the python modules in the test_scripts
repository.  Most of the scripts contain a single eponomously named
function, and most are re-implementations of the corresponding IDL
routines from Peter D.

bright_pix.py: Finds the bright pixels above a threshold = mean + nsig*sigma
               where mean and sigma are derived from the statistics of
               the imaging area of a single CCD segment.  nsig=5 by default.

dark_curr.py: Computes the dark current from a dark exposure by
              sampling random dx by dy boxes (dx=dy=100 by default) and
              taking the median of the dark current given by

              dark_current = median(box_signal)*gain/exptime

              exptime = exposure time given by the EXPTIME keyword in the
                        Primary HDU of the input FITS file.

dark_pct.py: Function to compute the maximum dark current for a given
             percentile of pixels.

eperTask.py: Compute the charge transfer efficiency using the EPER method
             for both parallel and serial directions.  This is implemented
             as a pipebase task.

flatGain.py: Calculate the gain and noise by examining to two flat field
             images.  Random dx by dy boxes (dx=dy=100 by default) are
             sampled at the same location in each image, and the average 
             pixel mean (= (mean(im1) + mean(im2))/2. and variance 
             (= var(im1 - im2)/2) are used to compute the gain (=var/mean).
             The final sensor gain is estimated from the median of the
             resulting distribution of box gains.

image_utils.py: "Standard" definitions of prescan, overscan, full
                segment and imaging regions for the e2v sensors.
                There are also some standard operations like bias
                removal, generating median images from a set of
                images, etc..
             
linearity.py:

pair_stats.py: This script computes the bias mean, bias rms, flat mean,
               flat rms, flat variance, gain, and e- noise from a pair
               of flat exposures and writes the statistics out in 
               an ascii table.

read_noise.py: Computes the read noise given a bias frame and a
               readout system noise measurement.  The NoiseDists
               functor returns a distribution of noise estimates
               evaluated in nsamp dx by dy pixel subregions.

xray_gain.py: This module uses the afwDetect algorithms to find Fe55
              hits and estimates the sensor gain from those signals.

pipeline/get_read_noise.py: Compute read noise distributions for a
              sample of images.  The system gain for each channel is
              determined from Fe55 data, and the corresponding bias
              frame is used to characterize the total system noise.
              Readout noise frames are used for determining the noise
              contribution from the electronics.

simulation/sim_tools.py: Tools to generate simulated images including
              bias, dark current, flat exposures, defects, and Fe55
              exposures.  These are intended for making idealized
              images for which we know the statistical properties
              precisely.  We can add other effects here as needed.

simulation/generate_Fe55_images.py: Generate Fe55 images and
              associated darks and bias images according to section
              5.4 of the E/O document (Dec 19, 2012 version).

simulation/generate_readout_noise.py: Generate the readout system
              noise frames according to section 5.8 of the E/O
              document (Dec 19, 2012 version).
